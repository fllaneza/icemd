# coding=utf-8
#!/usr/bin/env python

# Script genérico para entrenar un árbol de clasificacion de la librería de Machine Learning SciKit-Learn

import os
import json
import pickle
import sys

import pandas as pd

from sklearn import tree

# Estos son los paths que SageMeaker utiliza para montar su estructura
ROOT_PATH = '/opt/ml/'
INPUT_PATH = prefix + 'input/data'
OUTPUT_PATH = os.path.join(prefix, 'output')
MODEL_PATH = os.path.join(prefix, 'model')
PARAM_PATH = os.path.join(prefix, 'input/config/hyperparameters.json')

# Este algoritmo tiene un único canal de input llamado 'training'. 
CHANNEL_NAME = 'training'
TRAINING_PATH = os.path.join(INPUT_PATH, CHANNEL_NAME)

# Escogemos el nombre del modelo
MODEL_NAME = "decision-tree-model"

# Esta función ejecuta el script
def train():
    print('Empezando el entrenamiento...')

    # Lee todos los ficheros y los concatena en un único Pandas DataFrame
    input_files = [os.path.join(TRAINING_PATH, file) for file in os.listdir(TRAINING_PATH)]
    if len(input_files) == 0:
        raise ValueError(('No hay archivos en {}.').format(TRAINING_PATH))
    raw_data = [pd.read_csv(file, header=None) for file in input_files]
    train_data = pd.concat(raw_data)

    # Las etiquetas del dataset están en la primera columna
    train_y = train_data.ix[:,0]
    train_X = train_data.ix[:,1:]

    # Obtenemos los hiperparámetros que el usuario pasa con el Training Job
    with open(PARAM_PATH, 'r') as pp:
        trainingParams = json.load(pp)

    max_leaf_nodes = trainingParams.get('max_leaf_nodes', None)
    if max_leaf_nodes is not None:
        max_leaf_nodes = int(max_leaf_nodes)

    min_samples_split = trainingParams.get('min_samples_split', None)
    if min_samples_split is not None:
        min_samples_split = int(min_samples_split)

    # Entrenamos el modelo (un árbol de decisión) de clasificación
    clf = tree.DecisionTreeClassifier(max_leaf_nodes=max_leaf_nodes, min_samples_split=min_samples_split)
    clf = clf.fit(train_X, train_y)

    # Serializamos el modelo en formato 'pickle'
    with open(os.path.join(MODEL_PATH, MODEL_NAME + '.pkl'), 'w') as out:
        pickle.dump(clf, out)
    print('Entrenamiento completado!')


if __name__ == '__main__':
    train()

    # El código de salida 0 causa que el proceso se considere exitoso
    sys.exit(0)
